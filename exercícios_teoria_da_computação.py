# -*- coding: utf-8 -*-
"""Exercícios-Teoria-da-Computação.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Samuel-pixe/Teoria-da-Computacao-Exercicios/blob/main/Exerc%C3%ADcios_Teoria_da_Computa%C3%A7%C3%A3o.ipynb

##Atividades teoria da computação

##Exercícios 2
"""

import networkx as nx

G = nx.Graph()

G.add_node("1")
G.add_nodes_from(["2","3","4","5","6"])

G.add_edges_from([("1","3"), ("1","4"), ("1","5"), ("2","3"), ("2","4"), ("2","5"), ("3","5"), ("4","5")])

nx.draw(G,with_labels=True)

import networkx as nx

G = nx.Graph()

G.add_node("1")
G.add_nodes_from(["2","3","4","5"])

G.add_edges_from([("1","2"),("2","3"),("3","1"),("2","4")])

nx.draw(G,with_labels=True)

import networkx as nx

G = nx.DiGraph()

G.add_node("1")
G.add_nodes_from(["2","3","4","5"])

G.add_edges_from([("1","2"),("1","3"),("2","3"),("2","4"),("3","2"),("5","2")])

nx.draw(G,with_labels=True)

"""##Tarefa 1"""

import numpy as np

lista = [1,2,3,3,3,8]

flag=True
for i in lista:
  repeticao = lista.count(i)
  if repeticao > 1:
    flag = False

if flag:
  print("não repetiu")
else:
  print("repetiu")

import numpy as np
import networkx as nx

G = nx.Graph()
G.add_nodes_from(range(10))

for i in range(len(G)):
  G.add_edge(np.random.randint(0,9),np.random.randint(0,9))

A = nx.adjacency_matrix(G)
print(A.todense())

try:
    path = nx.dijkstra_path(G,source=6,target=7)
    path_lengh = nx.dijkstra_path_length(G,6,7)
    print("Caminho:",path)
    print("Comprimento do caminho:", path_lengh)
    nx.draw(G, with_labels=True)

    flag=True
    for i in path:
      R = path.count(i)
      if R > 1:
        flag= False

    if flag:
      print("O caminho é simples")
    else:
      print("O caminho não é simples")

except:
    print("caminho inexistente!")

"""##Tarefa 2"""

import numpy as np
import networkx as nx


G = nx.Graph()

V= np.array([3,2,1,0,3])



G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])
G.add_edges_from([(0,1),(1,2),(2,3),(3,0),(1,4),(2,4),(5,3)])


A = nx.adjacency_matrix(G)
print(A.todense())


if (V[0]==V[-1]):
  print("\nSequencia {0} é um ciclo".format(V))
else:
  print("\nSequencia {0} não se trata de um ciclo".format(V))


try:
  cycle = nx.find_cycle(G,orientation=None)
  print("\nCiclo encontrado",cycle)
except:
  print("Nenhum ciclo encontrado")


nx.draw(G, with_labels=True)

"""

##Tarefa 3
"""

#Grafo não direcionado

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt


G = nx.Graph()
G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])
G.add_edges_from([(0, 6), (0, 1), (0, 4), (0, 9), (0, 7), (0, 5), (1, 2), (1, 6),
                  (1, 8), (1, 3), (1, 9), (2, 8), (2, 4), (3, 7), (5, 6), (5, 7),
                  (5, 9), (6, 9), (7, 9), (8, 9)])


#transforma um grafo em grafo eureliano
H = nx.eulerize(G)


layout = nx.circular_layout(G)

plt.figure(figsize=(25,15))

try:
  A = nx.adjacency_matrix(G)
  print(A.todense())
  print("caminho eureliano: ", list(nx.eulerian_path(H))) #mostra um caminho eureliano no grafo
  plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo')
  plt.subplot(232), nx.draw(H,layout,with_labels= True, node_size=1000), plt.title('Eureliano')
except:
  print("Nenhum caminho euleriano encontrado")


try:
  # mostra o ciclo eureliano encontrado
  print("ciclo eureliano: ",list(nx.eulerian_circuit(H,source=None)))

except:
  print("Nenhum caminho euleriano encontrado")

#Grafo direcionado

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt



G = nx.DiGraph()
G.add_nodes_from([0,1,2,3,4])
G.add_edges_from([(0,1),(1,2),(2,3),(3,4),(4,0),(0,2),(2,4),(4,1),(1,3)])

E = nx.DiGraph()
E.add_nodes_from([0,1,2,3,4])
E.add_edges_from([(0,1),(1,2),(2,3),(3,4),(4,0),(0,2),(2,4),(4,1),(1,3),(3,0)])

layout = nx.circular_layout(G)

plt.figure(figsize=(25,15))

A = nx.adjacency_matrix(G)
print(A.todense())

try:
  print("caminho eureliano do grafo G: ", list(nx.eulerian_path(G))) #mostra um caminho eureliano no grafo
  plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo G')
except:
  print("Nenhum caminho euleriano encontrado no Grafo G")


try:
   #mostra um caminho eureliano no grafo
  print("caminho eureliano do grafo E: ", list(nx.eulerian_path(E,source=4))) # curiosamente o caminho que a função encontra é um ciclo
  plt.subplot(232), nx.draw(E,layout,with_labels= True, node_size=1000), plt.title('Grafo E')
except:
  print("Nenhum caminho euleriano encontrado no Grafo E")

try:
  # mostra o ciclo eureliano encontrado
  print("ciclo eureliano do Grafo G: ",list(nx.eulerian_circuit(G,source=None)))

except:
  print("Nenhum ciclo euleriano encontrado no grafo G")

try:
  # mostra o ciclo eureliano encontrado
  print("ciclo eureliano do Grafo E: ",list(nx.eulerian_circuit(E,source=None)))

except:
  print("Nenhum ciclo euleriano encontrado no grafo E")

"""##Hamiltoniano direcionado

"""

import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from networkx.algorithms import tournament


G = nx.DiGraph()
G.add_nodes_from([0,1,2,3,4])
G.add_edges_from([(0,1),(1,2),(2,3),(3,4),(4,0),(0,2),(2,4),(4,1),(1,3),(3,0)])


layout = nx.circular_layout(G)

plt.figure(figsize=(25,15))



plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo')


try:

  print("Caminho Hamiltoniano: ", list(tournament.random_tournament(5, seed=None)))
except:
  print("não existe caminho Hamiltoniano nesse grafo")


try:

  print("Ciclo Hamiltoniano: ", tournament.is_reachable(G, 1,1))
except:
  print("não existe ciclo Hamiltoniano nesse grafo")



"""##Tarefa 6

"""

import networkx as nx
import matplotlib.pyplot as plt


G = nx.Graph()
G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])

G.add_edge(0,6, weight = 12)
G.add_edge(0,1, weight = 5)
G.add_edge(0,4, weight = 3)
G.add_edge(0,9, weight = 10)
G.add_edge(0,7, weight = 4)
G.add_edge(0,5, weight = 12)
G.add_edge(1,2, weight = 40)
G.add_edge(1,6, weight = 3)
G.add_edge(1,8, weight = 5)
G.add_edge(1,3, weight = 6)
G.add_edge(1,9, weight = 10)
G.add_edge(2,8, weight = 4)
G.add_edge(2,4, weight = 7)
G.add_edge(3,7, weight = 9)
G.add_edge(5,6, weight = 2)
G.add_edge(5,7, weight = 3)
G.add_edge(5,9, weight = 15)
G.add_edge(6,9, weight = 7)
G.add_edge(7,9, weight = 22)
G.add_edge(8,9, weight = 10)

layout = nx.circular_layout(G)

T = nx.minimum_spanning_tree(G, algorithm='kruskal')

Gtotal = G.size(weight="weight")

Ttotal = T.size(weight="weight")

plt.figure(figsize=(25,15))

pesos = nx.get_edge_attributes(G,'weight')


pesos = nx.get_edge_attributes(G,'weight')
plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo G\n Custo = %.2f' %Gtotal)
nx.draw_networkx_edge_labels(G,layout,edge_labels=pesos)

peso = nx.get_edge_attributes(T,'weight')
plt.subplot(232), nx.draw(T,layout,with_labels= True, node_size=1000), plt.title('Grafo T - utilizando Kruskal\n Custo = %.2f' %Ttotal)
nx.draw_networkx_edge_labels(T,layout,edge_labels=peso)

plt.axis("off")
plt.show()

"""##Tarefa 7"""

import networkx as nx
import matplotlib.pyplot as plt


G = nx.Graph()
G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])

G.add_edge(0,6, weight = 12)
G.add_edge(0,1, weight = 5)
G.add_edge(0,4, weight = 3)
G.add_edge(0,9, weight = 10)
G.add_edge(0,7, weight = 4)
G.add_edge(0,5, weight = 12)
G.add_edge(1,2, weight = 40)
G.add_edge(1,6, weight = 3)
G.add_edge(1,8, weight = 5)
G.add_edge(1,3, weight = 6)
G.add_edge(1,9, weight = 10)
G.add_edge(2,8, weight = 4)
G.add_edge(2,4, weight = 7)
G.add_edge(3,7, weight = 9)
G.add_edge(5,6, weight = 2)
G.add_edge(5,7, weight = 3)
G.add_edge(5,9, weight = 15)
G.add_edge(6,9, weight = 7)
G.add_edge(7,9, weight = 22)
G.add_edge(8,9, weight = 10)

layout = nx.circular_layout(G)

T = nx.minimum_spanning_tree(G, algorithm='prim')

Gtotal = G.size(weight="weight")

Ttotal = T.size(weight="weight")

plt.figure(figsize=(25,15))

pesos = nx.get_edge_attributes(G,'weight')


pesos = nx.get_edge_attributes(G,'weight')
plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo G\n Custo = %.2f' %Gtotal)
nx.draw_networkx_edge_labels(G,layout,edge_labels=pesos)

peso = nx.get_edge_attributes(T,'weight')
plt.subplot(232), nx.draw(T,layout,with_labels= True, node_size=1000), plt.title('Grafo T - utilizando Prim\n Custo = %.2f' %Ttotal)
nx.draw_networkx_edge_labels(T,layout,edge_labels=peso)

plt.axis("off")
plt.show()

"""#Tarefa 8"""

import networkx as nx
import matplotlib.pyplot as plt


G = nx.DiGraph()
G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])


G.add_edge(0,6, weight = 12)
G.add_edge(0,1, weight = 5)
G.add_edge(4,0, weight = 3)
G.add_edge(0,9, weight = 10)
G.add_edge(7,0, weight = 4)
G.add_edge(0,5, weight = 12)
G.add_edge(1,2, weight = 40)
G.add_edge(6,1, weight = 3)
G.add_edge(1,8, weight = 5)
G.add_edge(1,3, weight = 6)
G.add_edge(1,9, weight = 10)
G.add_edge(2,8, weight = 4)
G.add_edge(2,4, weight = 7)
G.add_edge(7,3, weight = 9)
G.add_edge(5,6, weight = 2)
G.add_edge(5,7, weight = 3)
G.add_edge(9,5, weight = 15)
G.add_edge(6,9, weight = 7)
G.add_edge(9,7, weight = 22)
G.add_edge(8,9, weight = 10)

layout = nx.circular_layout(G)


path = nx.single_source_dijkstra(G, source=4, target=7)


print("Caminho mais curto: ",path)

Gtotal = G.size(weight="weight")


plt.figure(figsize=(25,15))

pesos = nx.get_edge_attributes(G,'weight')


pesos = nx.get_edge_attributes(G,'weight')
plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo G\n Custo = %.2f' %Gtotal)
nx.draw_networkx_edge_labels(G,layout,edge_labels=pesos)



plt.axis("off")
plt.show()

"""#Tarefa 9

"""

import networkx as nx
import matplotlib.pyplot as plt


G = nx.Graph()
G.add_nodes_from([0,1,2,3,4,5,6,7,8,9])
G.add_edges_from([(0, 6), (0, 1), (0, 4), (0, 9), (0, 7), (0, 5), (1, 2), (1, 6),
                  (1, 8), (1, 3), (1, 9), (2, 8), (2, 4), (3, 7), (5, 6), (5, 7),
                  (5, 9), (6, 9), (7, 9), (8, 9)])


T = nx.bfs_tree(G, source = 1)

D = nx.dfs_tree(G, source=1)


layout = nx.circular_layout(G)

plt.figure(figsize=(25,15))

plt.subplot(231), nx.draw(G,layout,with_labels= True, node_size=1000), plt.title('Grafo')

plt.subplot(232), nx.draw(T,layout,with_labels= True, node_size=1000), plt.title('Breadth first search')

plt.subplot(233), nx.draw(D,layout,with_labels= True, node_size=1000), plt.title('Depth first search')

texto = "Canada"
f = open('paises.txt', 'w')
f.write(texto)
f.write('Brasil\n')
f.write('México\n')
f.write('Paraguai\n')
f.close()

#leitura de todas as linhas do arquivo
f = open('paises.txt','r')
linhas = f.read()
print(linhas)
f.close()